{"ast":null,"code":"var _jsxFileName = \"/Users/coltraneyan/repos/ethertree/src/components/Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport ReactFlow from \"react-flow-renderer\";\n/* {[...props.tree].map((tx, i) => (\n  <div\n    id={i}\n    onClick={(e) => {\n      props.triggerFetch(e.target.innerHTML);\n    }} */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  type: \"input\",\n  data: {\n    label: \"Query an ETH Address to load a tree\"\n  },\n  position: {\n    x: 250,\n    y: 25\n  }\n}];\nconst initialEdges = [];\n\nconst Tree = props => {\n  _s();\n\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  useEffect(() => {\n    const newNodes = [{\n      id: `a`,\n      type: \"input\",\n      data: {\n        label: `${props.address}`\n      },\n      position: {\n        x: Math.random() * 500,\n        y: Math.random() * 500\n      }\n    }];\n    [...props.tree].forEach((tx, i) => newNodes.push({\n      id: `${i}`,\n      type: \"output\",\n      data: {\n        label: `${tx}`\n      },\n      position: {\n        x: Math.random() * 500,\n        y: Math.random() * 500\n      }\n    }));\n    setNodes(newNodes);\n  }, [props.tree]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flow-container\",\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      fitView: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tree, \"twI6Fn5hPLGwzW0nnufmE4rZgyc=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"names":["React","useState","useEffect","ReactFlow","initialNodes","id","type","data","label","position","x","y","initialEdges","Tree","props","nodes","setNodes","edges","setEdges","newNodes","address","Math","random","tree","forEach","tx","i","push"],"sources":["/Users/coltraneyan/repos/ethertree/src/components/Tree.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactFlow from \"react-flow-renderer\";\n\n/* {[...props.tree].map((tx, i) => (\n  <div\n    id={i}\n    onClick={(e) => {\n      props.triggerFetch(e.target.innerHTML);\n    }} */\nconst initialNodes = [\n  {\n    id: \"1\",\n    type: \"input\",\n    data: { label: \"Query an ETH Address to load a tree\" },\n    position: { x: 250, y: 25 },\n  },\n];\n\nconst initialEdges = [];\n\nconst Tree = (props) => {\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n\n  useEffect(() => {\n    const newNodes = [\n      {\n        id: `a`,\n        type: \"input\",\n        data: { label: `${props.address}` },\n        position: { x: Math.random() * 500, y: Math.random() * 500 },\n      },\n    ];\n    [...props.tree].forEach((tx, i) =>\n      newNodes.push({\n        id: `${i}`,\n        type: \"output\",\n        data: { label: `${tx}` },\n        position: { x: Math.random() * 500, y: Math.random() * 500 },\n      })\n    );\n\n    setNodes(newNodes);\n  }, [props.tree]);\n\n  return (\n    <div className=\"flow-container\">\n      <ReactFlow nodes={nodes} edges={edges} fitView />\n    </div>\n  );\n};\n\nexport default Tree;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,YAAY,GAAG,CACnB;EACEC,EAAE,EAAE,GADN;EAEEC,IAAI,EAAE,OAFR;EAGEC,IAAI,EAAE;IAAEC,KAAK,EAAE;EAAT,CAHR;EAIEC,QAAQ,EAAE;IAAEC,CAAC,EAAE,GAAL;IAAUC,CAAC,EAAE;EAAb;AAJZ,CADmB,CAArB;AASA,MAAMC,YAAY,GAAG,EAArB;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;EAAA;;EACtB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAACG,YAAD,CAAlC;EACA,MAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAACW,YAAD,CAAlC;EAEAV,SAAS,CAAC,MAAM;IACd,MAAMiB,QAAQ,GAAG,CACf;MACEd,EAAE,EAAG,GADP;MAEEC,IAAI,EAAE,OAFR;MAGEC,IAAI,EAAE;QAAEC,KAAK,EAAG,GAAEM,KAAK,CAACM,OAAQ;MAA1B,CAHR;MAIEX,QAAQ,EAAE;QAAEC,CAAC,EAAEW,IAAI,CAACC,MAAL,KAAgB,GAArB;QAA0BX,CAAC,EAAEU,IAAI,CAACC,MAAL,KAAgB;MAA7C;IAJZ,CADe,CAAjB;IAQA,CAAC,GAAGR,KAAK,CAACS,IAAV,EAAgBC,OAAhB,CAAwB,CAACC,EAAD,EAAKC,CAAL,KACtBP,QAAQ,CAACQ,IAAT,CAAc;MACZtB,EAAE,EAAG,GAAEqB,CAAE,EADG;MAEZpB,IAAI,EAAE,QAFM;MAGZC,IAAI,EAAE;QAAEC,KAAK,EAAG,GAAEiB,EAAG;MAAf,CAHM;MAIZhB,QAAQ,EAAE;QAAEC,CAAC,EAAEW,IAAI,CAACC,MAAL,KAAgB,GAArB;QAA0BX,CAAC,EAAEU,IAAI,CAACC,MAAL,KAAgB;MAA7C;IAJE,CAAd,CADF;IASAN,QAAQ,CAACG,QAAD,CAAR;EACD,CAnBQ,EAmBN,CAACL,KAAK,CAACS,IAAP,CAnBM,CAAT;EAqBA,oBACE;IAAK,SAAS,EAAC,gBAAf;IAAA,uBACE,QAAC,SAAD;MAAW,KAAK,EAAER,KAAlB;MAAyB,KAAK,EAAEE,KAAhC;MAAuC,OAAO;IAA9C;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CA9BD;;GAAMJ,I;;KAAAA,I;AAgCN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}