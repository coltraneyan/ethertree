{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\n\nconst DependencyTemplate = require(\"../DependencyTemplate\");\n\nconst memoize = require(\"../util/memoize\");\n/** @typedef {import(\"../Dependency\").TRANSITIVE} TRANSITIVE */\n\n/** @typedef {import(\"../Module\")} Module */\n\n\nconst getRawModule = memoize(() => require(\"../RawModule\"));\n\nclass ModuleDependency extends Dependency {\n  /**\n   * @param {string} request request path which needs resolving\n   */\n  constructor(request) {\n    super();\n    this.request = request;\n    this.userRequest = request;\n    this.range = undefined; // assertions must be serialized by subclasses that use it\n\n    /** @type {Record<string, any> | undefined} */\n\n    this.assertions = undefined;\n  }\n  /**\n   * @returns {string | null} an identifier to merge equal requests\n   */\n\n\n  getResourceIdentifier() {\n    let str = `module${this.request}`;\n\n    if (this.assertions !== undefined) {\n      str += JSON.stringify(this.assertions);\n    }\n\n    return str;\n  }\n  /**\n   * @returns {boolean | TRANSITIVE} true, when changes to the referenced module could affect the referencing module; TRANSITIVE, when changes to the referenced module could affect referencing modules of the referencing module\n   */\n\n\n  couldAffectReferencingModule() {\n    return true;\n  }\n  /**\n   * @param {string} context context directory\n   * @returns {Module} a module\n   */\n\n\n  createIgnoredModule(context) {\n    const RawModule = getRawModule();\n    return new RawModule(\"/* (ignored) */\", `ignored|${context}|${this.request}`, `${this.request} (ignored)`);\n  }\n\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.request);\n    write(this.userRequest);\n    write(this.range);\n    super.serialize(context);\n  }\n\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.request = read();\n    this.userRequest = read();\n    this.range = read();\n    super.deserialize(context);\n  }\n\n}\n\nModuleDependency.Template = DependencyTemplate;\nmodule.exports = ModuleDependency;","map":{"version":3,"names":["Dependency","require","DependencyTemplate","memoize","getRawModule","ModuleDependency","constructor","request","userRequest","range","undefined","assertions","getResourceIdentifier","str","JSON","stringify","couldAffectReferencingModule","createIgnoredModule","context","RawModule","serialize","write","deserialize","read","Template","module","exports"],"sources":["/Users/coltraneyan/repos/ethertree/node_modules/webpack/lib/dependencies/ModuleDependency.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\nconst DependencyTemplate = require(\"../DependencyTemplate\");\nconst memoize = require(\"../util/memoize\");\n\n/** @typedef {import(\"../Dependency\").TRANSITIVE} TRANSITIVE */\n/** @typedef {import(\"../Module\")} Module */\n\nconst getRawModule = memoize(() => require(\"../RawModule\"));\n\nclass ModuleDependency extends Dependency {\n\t/**\n\t * @param {string} request request path which needs resolving\n\t */\n\tconstructor(request) {\n\t\tsuper();\n\t\tthis.request = request;\n\t\tthis.userRequest = request;\n\t\tthis.range = undefined;\n\t\t// assertions must be serialized by subclasses that use it\n\t\t/** @type {Record<string, any> | undefined} */\n\t\tthis.assertions = undefined;\n\t}\n\n\t/**\n\t * @returns {string | null} an identifier to merge equal requests\n\t */\n\tgetResourceIdentifier() {\n\t\tlet str = `module${this.request}`;\n\t\tif (this.assertions !== undefined) {\n\t\t\tstr += JSON.stringify(this.assertions);\n\t\t}\n\t\treturn str;\n\t}\n\n\t/**\n\t * @returns {boolean | TRANSITIVE} true, when changes to the referenced module could affect the referencing module; TRANSITIVE, when changes to the referenced module could affect referencing modules of the referencing module\n\t */\n\tcouldAffectReferencingModule() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {string} context context directory\n\t * @returns {Module} a module\n\t */\n\tcreateIgnoredModule(context) {\n\t\tconst RawModule = getRawModule();\n\t\treturn new RawModule(\n\t\t\t\"/* (ignored) */\",\n\t\t\t`ignored|${context}|${this.request}`,\n\t\t\t`${this.request} (ignored)`\n\t\t);\n\t}\n\n\tserialize(context) {\n\t\tconst { write } = context;\n\t\twrite(this.request);\n\t\twrite(this.userRequest);\n\t\twrite(this.range);\n\t\tsuper.serialize(context);\n\t}\n\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\t\tthis.request = read();\n\t\tthis.userRequest = read();\n\t\tthis.range = read();\n\t\tsuper.deserialize(context);\n\t}\n}\n\nModuleDependency.Template = DependencyTemplate;\n\nmodule.exports = ModuleDependency;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,uBAAD,CAAlC;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,iBAAD,CAAvB;AAEA;;AACA;;;AAEA,MAAMG,YAAY,GAAGD,OAAO,CAAC,MAAMF,OAAO,CAAC,cAAD,CAAd,CAA5B;;AAEA,MAAMI,gBAAN,SAA+BL,UAA/B,CAA0C;EACzC;AACD;AACA;EACCM,WAAW,CAACC,OAAD,EAAU;IACpB;IACA,KAAKA,OAAL,GAAeA,OAAf;IACA,KAAKC,WAAL,GAAmBD,OAAnB;IACA,KAAKE,KAAL,GAAaC,SAAb,CAJoB,CAKpB;;IACA;;IACA,KAAKC,UAAL,GAAkBD,SAAlB;EACA;EAED;AACD;AACA;;;EACCE,qBAAqB,GAAG;IACvB,IAAIC,GAAG,GAAI,SAAQ,KAAKN,OAAQ,EAAhC;;IACA,IAAI,KAAKI,UAAL,KAAoBD,SAAxB,EAAmC;MAClCG,GAAG,IAAIC,IAAI,CAACC,SAAL,CAAe,KAAKJ,UAApB,CAAP;IACA;;IACD,OAAOE,GAAP;EACA;EAED;AACD;AACA;;;EACCG,4BAA4B,GAAG;IAC9B,OAAO,IAAP;EACA;EAED;AACD;AACA;AACA;;;EACCC,mBAAmB,CAACC,OAAD,EAAU;IAC5B,MAAMC,SAAS,GAAGf,YAAY,EAA9B;IACA,OAAO,IAAIe,SAAJ,CACN,iBADM,EAEL,WAAUD,OAAQ,IAAG,KAAKX,OAAQ,EAF7B,EAGL,GAAE,KAAKA,OAAQ,YAHV,CAAP;EAKA;;EAEDa,SAAS,CAACF,OAAD,EAAU;IAClB,MAAM;MAAEG;IAAF,IAAYH,OAAlB;IACAG,KAAK,CAAC,KAAKd,OAAN,CAAL;IACAc,KAAK,CAAC,KAAKb,WAAN,CAAL;IACAa,KAAK,CAAC,KAAKZ,KAAN,CAAL;IACA,MAAMW,SAAN,CAAgBF,OAAhB;EACA;;EAEDI,WAAW,CAACJ,OAAD,EAAU;IACpB,MAAM;MAAEK;IAAF,IAAWL,OAAjB;IACA,KAAKX,OAAL,GAAegB,IAAI,EAAnB;IACA,KAAKf,WAAL,GAAmBe,IAAI,EAAvB;IACA,KAAKd,KAAL,GAAac,IAAI,EAAjB;IACA,MAAMD,WAAN,CAAkBJ,OAAlB;EACA;;AA3DwC;;AA8D1Cb,gBAAgB,CAACmB,QAAjB,GAA4BtB,kBAA5B;AAEAuB,MAAM,CAACC,OAAP,GAAiBrB,gBAAjB"},"metadata":{},"sourceType":"script"}