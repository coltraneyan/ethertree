[{"/Users/coltraneyan/repos/ethertree/src/index.js":"1","/Users/coltraneyan/repos/ethertree/src/App.js":"2","/Users/coltraneyan/repos/ethertree/src/components/Tree.js":"3","/Users/coltraneyan/repos/ethertree/src/components/Input.js":"4"},{"size":232,"mtime":1652898481583,"results":"5","hashOfConfig":"6"},{"size":1084,"mtime":1657078672944,"results":"7","hashOfConfig":"6"},{"size":1381,"mtime":1657080149029,"results":"8","hashOfConfig":"6"},{"size":457,"mtime":1657077865079,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jiwxtb",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/coltraneyan/repos/ethertree/src/index.js",[],[],"/Users/coltraneyan/repos/ethertree/src/App.js",[],[],[],"/Users/coltraneyan/repos/ethertree/src/components/Tree.js",["24"],[],"import React from \"react\";\nimport Xarrow from \"react-xarrows\";\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nfunction pseudoPadding(bottom, top) {\n  if (Math.round(Math.random() * 1 + 1) == 1) {\n    return top;\n  } else {\n    return bottom;\n  }\n}\n\nconst Tree = (props) => {\n  return (\n    <div className=\"flow-container\">\n      <div className=\"central-node\" id=\"a\">\n        {props.address}\n      </div>\n      {[...props.tree].map((tx, i) => (\n        <div\n          className=\"node-wrapper\"\n          id={tx}\n          onClick={(e) => {\n            props.triggerFetch(e.target.id);\n          }}\n          style={{\n            position: \"absolute\",\n            left: `${getRandomInt(20, 80)}%`,\n            transform: \"translateX(-50%)\",\n            top: `${pseudoPadding(\n              getRandomInt(20, 45),\n              getRandomInt(55, 80)\n            )}%`,\n          }}\n        >\n          <div className=\"address-node\">{tx}</div>\n        </div>\n      ))}\n      {[...props.tree].map((tx, i) => (\n        <Xarrow\n          start=\"a\" //can be react ref\n          end={tx} //or an id\n          startAnchor=\"middle\"\n          endAnchor=\"middle\"\n          showHead={false}\n          strokeWidth={1}\n          curveness={0}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Tree;\n","/Users/coltraneyan/repos/ethertree/src/components/Input.js",[],[],{"ruleId":"25","severity":1,"message":"26","line":11,"column":41,"nodeType":"27","messageId":"28","endLine":11,"endColumn":43},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]