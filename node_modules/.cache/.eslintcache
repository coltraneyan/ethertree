[{"/Users/coltraneyan/repos/ethertree/src/index.js":"1","/Users/coltraneyan/repos/ethertree/src/App.js":"2","/Users/coltraneyan/repos/ethertree/src/components/Tree.js":"3","/Users/coltraneyan/repos/ethertree/src/components/Input.js":"4"},{"size":232,"mtime":1652898481583,"results":"5","hashOfConfig":"6"},{"size":1048,"mtime":1652991924070,"results":"7","hashOfConfig":"6"},{"size":420,"mtime":1652991912820,"results":"8","hashOfConfig":"6"},{"size":431,"mtime":1652979354997,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jiwxtb",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"/Users/coltraneyan/repos/ethertree/src/index.js",[],[],"/Users/coltraneyan/repos/ethertree/src/App.js",["24"],[],"import React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\nimport Input from \"./components/Input\";\nimport Tree from \"./components/Tree.js\";\n\nfunction App() {\n  const [tree, setTree] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchHistory(address) {\n      const provider = new ethers.providers.EtherscanProvider(\n        \"homestead\",\n        \"GA5DBDU9R58E28EUTCVD9KA3H3FXBP5MH94\"\n      );\n\n      const historyGetter = await provider.getHistory(address);\n      const txList = new Set();\n      historyGetter.forEach((tx) => {\n        txList.add(tx.from == parseInt(address) ? tx.to : tx.from);\n      });\n\n      setTree([...txList].slice(0, 20));\n    }\n\n    fetchHistory(address);\n  }, [address]);\n\n  function triggerFetch(newAddress) {\n    setAddress(newAddress);\n  }\n\n  return (\n    <div>\n      <Input triggerFetch={triggerFetch} />\n      <Tree tree={tree} triggerFetch={triggerFetch} address={address} />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/coltraneyan/repos/ethertree/src/components/Tree.js",[],[],"/Users/coltraneyan/repos/ethertree/src/components/Input.js",[],[],[],{"ruleId":"25","severity":1,"message":"26","line":21,"column":28,"nodeType":"27","messageId":"28","endLine":21,"endColumn":30},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]