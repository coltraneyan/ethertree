{"ast":null,"code":"var _jsxFileName = \"/Users/coltraneyan/repos/ethertree/src/components/Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ReactFlow from \"react-flow-renderer\";\n/* {[...props.tree].map((tx, i) => (\n  <div\n    id={i}\n    onClick={(e) => {\n      props.triggerFetch(e.target.innerHTML);\n    }} */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  type: \"input\",\n  data: {\n    label: \"Input Node\"\n  },\n  position: {\n    x: 250,\n    y: 25\n  }\n}, {\n  id: \"2\",\n  // you can also pass a React component as a label\n  data: {\n    label: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Default Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 20\n    }, this)\n  },\n  position: {\n    x: 100,\n    y: 125\n  }\n}, {\n  id: \"3\",\n  type: \"output\",\n  data: {\n    label: \"Output Node\"\n  },\n  position: {\n    x: 250,\n    y: 250\n  }\n}];\nconst initialEdges = [{\n  id: \"e1-2\",\n  source: \"1\",\n  target: \"2\"\n}, {\n  id: \"e2-3\",\n  source: \"2\",\n  target: \"3\",\n  animated: true\n}];\n\nconst Tree = () => {\n  _s();\n\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      fitView: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tree, \"oyPBSKctkSfw1SXqHPGlQofdQkY=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"names":["React","useState","ReactFlow","initialNodes","id","type","data","label","position","x","y","initialEdges","source","target","animated","Tree","nodes","setNodes","edges","setEdges"],"sources":["/Users/coltraneyan/repos/ethertree/src/components/Tree.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport ReactFlow from \"react-flow-renderer\";\n\n/* {[...props.tree].map((tx, i) => (\n  <div\n    id={i}\n    onClick={(e) => {\n      props.triggerFetch(e.target.innerHTML);\n    }} */\nconst initialNodes = [\n  {\n    id: \"1\",\n    type: \"input\",\n    data: { label: \"Input Node\" },\n    position: { x: 250, y: 25 },\n  },\n\n  {\n    id: \"2\",\n    // you can also pass a React component as a label\n    data: { label: <div>Default Node</div> },\n    position: { x: 100, y: 125 },\n  },\n  {\n    id: \"3\",\n    type: \"output\",\n    data: { label: \"Output Node\" },\n    position: { x: 250, y: 250 },\n  },\n];\n\nconst initialEdges = [\n  { id: \"e1-2\", source: \"1\", target: \"2\" },\n  { id: \"e2-3\", source: \"2\", target: \"3\", animated: true },\n];\n\nconst Tree = () => {\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n\n  return (\n    <div>\n      <ReactFlow nodes={nodes} fitView />\n    </div>\n  );\n};\n\nexport default Tree;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,YAAY,GAAG,CACnB;EACEC,EAAE,EAAE,GADN;EAEEC,IAAI,EAAE,OAFR;EAGEC,IAAI,EAAE;IAAEC,KAAK,EAAE;EAAT,CAHR;EAIEC,QAAQ,EAAE;IAAEC,CAAC,EAAE,GAAL;IAAUC,CAAC,EAAE;EAAb;AAJZ,CADmB,EAQnB;EACEN,EAAE,EAAE,GADN;EAEE;EACAE,IAAI,EAAE;IAAEC,KAAK,eAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAT,CAHR;EAIEC,QAAQ,EAAE;IAAEC,CAAC,EAAE,GAAL;IAAUC,CAAC,EAAE;EAAb;AAJZ,CARmB,EAcnB;EACEN,EAAE,EAAE,GADN;EAEEC,IAAI,EAAE,QAFR;EAGEC,IAAI,EAAE;IAAEC,KAAK,EAAE;EAAT,CAHR;EAIEC,QAAQ,EAAE;IAAEC,CAAC,EAAE,GAAL;IAAUC,CAAC,EAAE;EAAb;AAJZ,CAdmB,CAArB;AAsBA,MAAMC,YAAY,GAAG,CACnB;EAAEP,EAAE,EAAE,MAAN;EAAcQ,MAAM,EAAE,GAAtB;EAA2BC,MAAM,EAAE;AAAnC,CADmB,EAEnB;EAAET,EAAE,EAAE,MAAN;EAAcQ,MAAM,EAAE,GAAtB;EAA2BC,MAAM,EAAE,GAAnC;EAAwCC,QAAQ,EAAE;AAAlD,CAFmB,CAArB;;AAKA,MAAMC,IAAI,GAAG,MAAM;EAAA;;EACjB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAACE,YAAD,CAAlC;EACA,MAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAACU,YAAD,CAAlC;EAEA,oBACE;IAAA,uBACE,QAAC,SAAD;MAAW,KAAK,EAAEK,KAAlB;MAAyB,OAAO;IAAhC;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CATD;;GAAMD,I;;KAAAA,I;AAWN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}