{"ast":null,"code":"var _jsxFileName = \"/Users/coltraneyan/repos/ethertree/src/components/Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport ReactFlow from \"react-flow-renderer\";\nimport { node } from \"webpack\";\n/* {[...props.tree].map((tx, i) => (\n  <div\n    id={i}\n    onClick={(e) => {\n      props.triggerFetch(e.target.innerHTML);\n    }} */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialEdges = [];\n\nconst Tree = props => {\n  _s();\n\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n\n  const onNodeClick = node => props.triggerFetch(node.data.label);\n\n  useEffect(() => {\n    const newNodes = [{\n      id: `a`,\n      type: \"input\",\n      data: {\n        label: `${props.address}`\n      },\n      position: {\n        x: Math.random() * 500,\n        y: Math.random() * 500\n      }\n    }];\n    const newEdges = [];\n    [...props.tree].forEach((tx, i) => newNodes.push({\n      id: `${i}`,\n      type: \"output\",\n      data: {\n        label: `${tx}`\n      },\n      position: {\n        x: Math.random() * 500,\n        y: Math.random() * 500\n      }\n    }));\n    [...props.tree].forEach((tx, i) => newEdges.push({\n      id: `${tx}`,\n      source: \"a\",\n      target: `${i}`\n    }));\n    setNodes(newNodes);\n    setEdges(newEdges);\n  }, [props.tree]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flow-container\",\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodeClick: onNodeClick,\n      fitView: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tree, \"qOdGaiImnCja3mNU5uxxCrNYw9I=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"names":["React","useState","useEffect","ReactFlow","node","initialEdges","Tree","props","nodes","setNodes","edges","setEdges","onNodeClick","triggerFetch","data","label","newNodes","id","type","address","position","x","Math","random","y","newEdges","tree","forEach","tx","i","push","source","target"],"sources":["/Users/coltraneyan/repos/ethertree/src/components/Tree.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactFlow from \"react-flow-renderer\";\nimport { node } from \"webpack\";\n\n/* {[...props.tree].map((tx, i) => (\n  <div\n    id={i}\n    onClick={(e) => {\n      props.triggerFetch(e.target.innerHTML);\n    }} */\n\nconst initialEdges = [];\n\nconst Tree = (props) => {\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n\n  const onNodeClick = (node) => props.triggerFetch(node.data.label);\n\n  useEffect(() => {\n    const newNodes = [\n      {\n        id: `a`,\n        type: \"input\",\n        data: { label: `${props.address}` },\n        position: { x: Math.random() * 500, y: Math.random() * 500 },\n      },\n    ];\n    const newEdges = [];\n\n    [...props.tree].forEach((tx, i) =>\n      newNodes.push({\n        id: `${i}`,\n        type: \"output\",\n        data: { label: `${tx}` },\n        position: { x: Math.random() * 500, y: Math.random() * 500 },\n      })\n    );\n\n    [...props.tree].forEach((tx, i) =>\n      newEdges.push({ id: `${tx}`, source: \"a\", target: `${i}` })\n    );\n\n    setNodes(newNodes);\n    setEdges(newEdges);\n  }, [props.tree]);\n\n  return (\n    <div className=\"flow-container\">\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodeClick={onNodeClick}\n        fitView\n      />\n    </div>\n  );\n};\n\nexport default Tree;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,IAAT,QAAqB,SAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,YAAY,GAAG,EAArB;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;EAAA;;EACtB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;;EAEA,MAAMW,WAAW,GAAIR,IAAD,IAAUG,KAAK,CAACM,YAAN,CAAmBT,IAAI,CAACU,IAAL,CAAUC,KAA7B,CAA9B;;EAEAb,SAAS,CAAC,MAAM;IACd,MAAMc,QAAQ,GAAG,CACf;MACEC,EAAE,EAAG,GADP;MAEEC,IAAI,EAAE,OAFR;MAGEJ,IAAI,EAAE;QAAEC,KAAK,EAAG,GAAER,KAAK,CAACY,OAAQ;MAA1B,CAHR;MAIEC,QAAQ,EAAE;QAAEC,CAAC,EAAEC,IAAI,CAACC,MAAL,KAAgB,GAArB;QAA0BC,CAAC,EAAEF,IAAI,CAACC,MAAL,KAAgB;MAA7C;IAJZ,CADe,CAAjB;IAQA,MAAME,QAAQ,GAAG,EAAjB;IAEA,CAAC,GAAGlB,KAAK,CAACmB,IAAV,EAAgBC,OAAhB,CAAwB,CAACC,EAAD,EAAKC,CAAL,KACtBb,QAAQ,CAACc,IAAT,CAAc;MACZb,EAAE,EAAG,GAAEY,CAAE,EADG;MAEZX,IAAI,EAAE,QAFM;MAGZJ,IAAI,EAAE;QAAEC,KAAK,EAAG,GAAEa,EAAG;MAAf,CAHM;MAIZR,QAAQ,EAAE;QAAEC,CAAC,EAAEC,IAAI,CAACC,MAAL,KAAgB,GAArB;QAA0BC,CAAC,EAAEF,IAAI,CAACC,MAAL,KAAgB;MAA7C;IAJE,CAAd,CADF;IASA,CAAC,GAAGhB,KAAK,CAACmB,IAAV,EAAgBC,OAAhB,CAAwB,CAACC,EAAD,EAAKC,CAAL,KACtBJ,QAAQ,CAACK,IAAT,CAAc;MAAEb,EAAE,EAAG,GAAEW,EAAG,EAAZ;MAAeG,MAAM,EAAE,GAAvB;MAA4BC,MAAM,EAAG,GAAEH,CAAE;IAAzC,CAAd,CADF;IAIApB,QAAQ,CAACO,QAAD,CAAR;IACAL,QAAQ,CAACc,QAAD,CAAR;EACD,CA1BQ,EA0BN,CAAClB,KAAK,CAACmB,IAAP,CA1BM,CAAT;EA4BA,oBACE;IAAK,SAAS,EAAC,gBAAf;IAAA,uBACE,QAAC,SAAD;MACE,KAAK,EAAElB,KADT;MAEE,KAAK,EAAEE,KAFT;MAGE,WAAW,EAAEE,WAHf;MAIE,OAAO;IAJT;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAUD,CA5CD;;GAAMN,I;;KAAAA,I;AA8CN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}