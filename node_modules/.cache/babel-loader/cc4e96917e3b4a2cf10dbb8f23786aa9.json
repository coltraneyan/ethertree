{"ast":null,"code":"var _jsxFileName = \"/Users/coltraneyan/repos/ethertree/src/components/Tree.js\";\nimport React from \"react\";\nimport Xarrow from \"react-xarrows\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nconst Tree = props => {\n  if (props.loading == false) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flow-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"central-node\",\n        id: \"a\",\n        children: props.address\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), [...props.tree].map((tx, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"node-wrapper\",\n        id: tx,\n        onClick: e => {\n          props.triggerFetch(e.target.id);\n        },\n        style: {\n          position: \"absolute\",\n          left: `${getRandomInt(20, 80)}%`,\n          transform: \"translateX(-50%)\",\n          top: `${getRandomInt(20, 80)}%`\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"address-node\",\n          children: tx\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }, this)), [...props.tree].map((tx, i) => /*#__PURE__*/_jsxDEV(Xarrow, {\n        start: \"a\" //can be react ref\n        ,\n        end: tx //or an id\n        ,\n        startAnchor: \"middle\",\n        endAnchor: \"middle\",\n        showHead: false,\n        strokeWidth: 1,\n        curveness: 0,\n        lineColor: \"#ff355e\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this);\n  } else if (props.loading == false) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Ethertree\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }, this);\n  }\n};\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"names":["React","Xarrow","getRandomInt","min","max","Math","ceil","floor","random","Tree","props","loading","address","tree","map","tx","i","e","triggerFetch","target","id","position","left","transform","top"],"sources":["/Users/coltraneyan/repos/ethertree/src/components/Tree.js"],"sourcesContent":["import React from \"react\";\nimport Xarrow from \"react-xarrows\";\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nconst Tree = (props) => {\n  if (props.loading == false) {\n    return (\n      <div className=\"flow-container\">\n        <div className=\"central-node\" id=\"a\">\n          {props.address}\n        </div>\n        {[...props.tree].map((tx, i) => (\n          <div\n            className=\"node-wrapper\"\n            id={tx}\n            onClick={(e) => {\n              props.triggerFetch(e.target.id);\n            }}\n            style={{\n              position: \"absolute\",\n              left: `${getRandomInt(20, 80)}%`,\n              transform: \"translateX(-50%)\",\n              top: `${getRandomInt(20, 80)}%`,\n            }}\n          >\n            <div className=\"address-node\">{tx}</div>\n          </div>\n        ))}\n        {[...props.tree].map((tx, i) => (\n          <Xarrow\n            start=\"a\" //can be react ref\n            end={tx} //or an id\n            startAnchor=\"middle\"\n            endAnchor=\"middle\"\n            showHead={false}\n            strokeWidth={1}\n            curveness={0}\n            lineColor=\"#ff355e\"\n          />\n        ))}\n      </div>\n    );\n  } else if (props.loading == false) {\n    return <div>loading</div>;\n  } else {\n    return <div>Ethertree</div>;\n  }\n};\n\nexport default Tree;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,eAAnB;;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;EAC9BD,GAAG,GAAGE,IAAI,CAACC,IAAL,CAAUH,GAAV,CAAN;EACAC,GAAG,GAAGC,IAAI,CAACE,KAAL,CAAWH,GAAX,CAAN;EACA,OAAOC,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,MAAL,MAAiBJ,GAAG,GAAGD,GAAvB,IAA8BA,GAAzC,CAAP;AACD;;AAED,MAAMM,IAAI,GAAIC,KAAD,IAAW;EACtB,IAAIA,KAAK,CAACC,OAAN,IAAiB,KAArB,EAA4B;IAC1B,oBACE;MAAK,SAAS,EAAC,gBAAf;MAAA,wBACE;QAAK,SAAS,EAAC,cAAf;QAA8B,EAAE,EAAC,GAAjC;QAAA,UACGD,KAAK,CAACE;MADT;QAAA;QAAA;QAAA;MAAA,QADF,EAIG,CAAC,GAAGF,KAAK,CAACG,IAAV,EAAgBC,GAAhB,CAAoB,CAACC,EAAD,EAAKC,CAAL,kBACnB;QACE,SAAS,EAAC,cADZ;QAEE,EAAE,EAAED,EAFN;QAGE,OAAO,EAAGE,CAAD,IAAO;UACdP,KAAK,CAACQ,YAAN,CAAmBD,CAAC,CAACE,MAAF,CAASC,EAA5B;QACD,CALH;QAME,KAAK,EAAE;UACLC,QAAQ,EAAE,UADL;UAELC,IAAI,EAAG,GAAEpB,YAAY,CAAC,EAAD,EAAK,EAAL,CAAS,GAFzB;UAGLqB,SAAS,EAAE,kBAHN;UAILC,GAAG,EAAG,GAAEtB,YAAY,CAAC,EAAD,EAAK,EAAL,CAAS;QAJxB,CANT;QAAA,uBAaE;UAAK,SAAS,EAAC,cAAf;UAAA,UAA+Ba;QAA/B;UAAA;UAAA;UAAA;QAAA;MAbF;QAAA;QAAA;QAAA;MAAA,QADD,CAJH,EAqBG,CAAC,GAAGL,KAAK,CAACG,IAAV,EAAgBC,GAAhB,CAAoB,CAACC,EAAD,EAAKC,CAAL,kBACnB,QAAC,MAAD;QACE,KAAK,EAAC,GADR,CACY;QADZ;QAEE,GAAG,EAAED,EAFP,CAEW;QAFX;QAGE,WAAW,EAAC,QAHd;QAIE,SAAS,EAAC,QAJZ;QAKE,QAAQ,EAAE,KALZ;QAME,WAAW,EAAE,CANf;QAOE,SAAS,EAAE,CAPb;QAQE,SAAS,EAAC;MARZ;QAAA;QAAA;QAAA;MAAA,QADD,CArBH;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAoCD,CArCD,MAqCO,IAAIL,KAAK,CAACC,OAAN,IAAiB,KAArB,EAA4B;IACjC,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD,CAFM,MAEA;IACL,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;AACF,CA3CD;;KAAMF,I;AA6CN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}